{"version":3,"sources":["serviceWorker.js","components/card.jsx","components/cardList.jsx","components/searchBox.jsx","components/scroll.jsx","components/ErrorBoundary.js","App.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","props","react_default","a","createElement","Fragment","className","alt","src","concat","id","name","email","CardList","_ref","robots","cardComponent","map","user","i","card","key","SeachBox","Searchfield","SearchChange","type","placeholder","onChange","Scroll","children","ErrorBoundary","hasError","info","this","setState","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","target","value","_this2","fetch","response","json","users","_this3","filteredRobots","filter","robots_param","toLowerCase","includes","length","react","searchBox","src_components_scroll","components_ErrorBoundary","cardList","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.651b4701.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React  from 'react';\r\n\r\nconst Card = (props) => { \r\n    //const Card = ({name, email, id})\r\n    //const {name, email, id} = props;\r\n    // this is destructuring 4&5, so instead of writing props.id, props.name, props.email...after this we just write {email},\r\n    //{id}, {name} but we are not using it here\r\nreturn(\r\n    <React.Fragment>\r\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow card-img'>\r\n                <img alt='robot' src={`https://robohash.org/${props.id}?200*200`} />\r\n                <h2>\r\n                    {props.name}{/*props here means robot[index] = props */}\r\n                </h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n    </React.Fragment>\r\n)};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\nconst CardList = ({ robots }) =>{\r\n    const cardComponent = robots.map((user, i) => {\r\n       return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} /> \r\n    })\r\n\r\n    return (\r\n        <React.Fragment>\r\n             {cardComponent}      \r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SeachBox = ({Searchfield, SearchChange}) => \r\n(<div className='pa2'>\r\n    <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots' onChange={SearchChange} />\r\n</div>)\r\n\r\n\r\nexport default SeachBox;","import React from 'react';\r\nimport './scroll.css'\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div className='fixed-navbar'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch(error, info){\n        this.setState({ hasError:true })\n    }\n\n    render() {\n       if(this.state.hasError){\n           return <h1>Ooops. this is not good</h1>\n       }\n       return this.props.children\n    }\n}\n\nexport default ErrorBoundary\n","import React, {Component, Fragment} from 'react';\r\nimport CardList from './components/cardList';\r\nimport SearchBox from './components/searchBox';\r\nimport Scroll from './components/scroll'\r\nimport ErrorBoundary from './components/ErrorBoundary'\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n       this.state = {\r\n        robots: [],\r\n        Searchfield:\"\"\r\n        }\r\n    }\r\n        \r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users =>{this.setState({ robots: users})});\r\n        console.log('it did mount')\r\n        // this.setState({robots: robots})\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({Searchfield: event.target.value})\r\n       \r\n    }\r\n\r\n    render(){\r\n         const filteredRobots = this.state.robots.filter((robots_param) => {\r\n            return robots_param.name.toLowerCase().includes(this.state.Searchfield.toLowerCase());\r\n        });\r\n        \r\n        // should incase server responds slowly\r\n        if(this.state.robots.length === 0){ \r\n            return <p className='tc'>loading...</p>\r\n        }else{\r\n            return(\r\n                <Fragment>\r\n                    <div className='tc'>\r\n                        <h1>RoboFriends</h1>\r\n                        <SearchBox SearchChange={this.onSearchChange}/>\r\n                        <Scroll>\r\n                            <ErrorBoundary>\r\n                                <CardList robots ={ filteredRobots } />\r\n                            </ErrorBoundary> \r\n                        </Scroll> \r\n                    </div>  \r\n                </Fragment>\r\n            )\r\n        } \r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App.jsx';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}